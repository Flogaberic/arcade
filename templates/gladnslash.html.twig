{% extends "base.html.twig" %}

{% block title %} Glad'N'Slash | {{ parent() }} {% endblock %}

{% block body %}

<script src="{{ asset('js/phaser.min.js') }}"></script>

<script>
    import Phaser from "phaser";

    var config = {
    type: Phaser.AUTO,
    // les dimensions de l'écran
    width: 800,
    height: 600,
    physics: {
        default: "arcade",
        arcade: {
        gravity: { y: 300 },
        debug: false
        }
    },
    scene: {
        preload: preload,
        create: create,
        update: update
    },
    scale: {
        mode: Phaser.Scale.FIT,
        autoCenter: Phaser.Scale.CENTER_BOTH
    }
    };

    // création du jeu
    var game = new Phaser.Game(config);
    var boutonAttaque;
    var player; // variable pour le personnage de jeu
    var cursors; // variable pour le clavier
    var pts = 0;
    var saut;
    var gauche;
    var bas;
    var droite;
    var dash;
    var zone_texte_score;
    var groupe_ennemis;
    var touchesActivees = true;
    var chronoText;
    var monTimer;
    var chrono = 0;
    var zone_vie;
    var zone_coeur;
    var zone_chrono;
    var zone_crane;
    var timer;
    var vitesseJoueur = 1;
    var vitesseEnnemis;
    var damage;
    var un_ennemi;
    var collision = false;
    var ennemi_actif = true;
    //vie
    var vie = 1000;
    var maxVie = 1000;
    var lifeBarBackground;
    var lifeBarForeground;
    //spawn mob
    var shuffledCo;
    var randomCoordinate1;
    var randomCoordinate2;
    var cox = [50, 500, 1680, 2150, 2700, 3150];
    var coy = [833, 610, 190];
    var dashactif = true;

    // fonction timer de 120 secondes
    function compteUneSeconde() {
    chrono = chrono + 1; // on incremente le chronometre d'une unite
    chronoText.setText(chrono + "/120"); // mise à jour de l'affichage
    if (chrono >= 120) {
        window.location.href = "cinematique_1.html";
    }
    }

    function preload() {
    //chargement son
    this.load.audio("nomDuSon", "/src/assets/Kingdom_Of_Pixels.mp3");
    // chargement du personnage
    this.load.spritesheet(
        "leodidas",
        "/src/assets/spritesheet-personnagetermine.png",
        {
        frameWidth: 32,
        frameHeight: 32
        }
    );
    // chargement des ennemis
    this.load.spritesheet(
        "ennemi",
        "/src/assets/spritesheet-ennemi1complete.png",
        {
        frameWidth: 32,
        frameHeight: 32
        }
    );

    // chargement des pictogrammes de l'interface
    this.load.image("chrono", "/src/assets/chronopicto.png");
    this.load.image("coeur", "/src/assets/coeurcentre.png");
    this.load.image("crane", "/src/assets/cranepicto.png");
    // chargement tuiles de jeu
    this.load.image("Phaser_tuilesdejeu", "/src/assets/tileset.png");

    // chargement de la carte
    this.load.tilemapTiledJSON("carte", "/src/assets/level_1.json");
    }

    function create() {
    //chargement musique
    var audio = this.sound.add("nomDuSon", { loop: true });
    audio.play();

    // chargement de la carte du niveau
    const carteDuNiveau = this.add.tilemap("carte");

    // chargement du jeu de tuiles
    const tileset = carteDuNiveau.addTilesetImage(
        "tileset",
        "Phaser_tuilesdejeu"
    );

    // chargement des calques
    const backgroundLayer = carteDuNiveau.createStaticLayer(
        "background",
        tileset
    );

    const plateformes2 = carteDuNiveau.createStaticLayer("background_1", tileset);

    const plateformes4 = carteDuNiveau.createStaticLayer(
        "background_1.1",
        tileset
    );

    const plateformes5 = carteDuNiveau.createStaticLayer(
        "background_1.2",
        tileset
    );

    const plateformes1 = carteDuNiveau.createStaticLayer("background_2", tileset);

    const plateformes3 = carteDuNiveau.createStaticLayer("background_3", tileset);

    // définition des objets solides avec lesquels le personnage va se cogner
    const sol = carteDuNiveau.createStaticLayer("solide_tiles", tileset);
    const plateformes = carteDuNiveau.createStaticLayer("plateformes", tileset);
    sol.setCollisionByProperty({ estSolide: true });
    plateformes.setCollisionByProperty({ estTransparent: true });

    // création du personnage de jeu, positionnement et mise à l'échelle
    player = this.physics.add.sprite(1600, 847, "leodidas");
    player.setScale(1.8);

    // ajout du modèle de collision entre le personnage et les plates-formes
    this.physics.add.collider(player, plateformes);
    this.physics.add.collider(player, sol);

    // ajout du modèle de collision entre le personnage et le monde
    player.setCollideWorldBounds(true);

    // Animations du personnage
    // animation pour tourner à gauche
    this.anims.create({
        key: "left",
        frames: this.anims.generateFrameNumbers("leodidas", { start: 17, end: 23 }),
        frameRate: 10,
        repeat: -1
    });
    // animation pour tourner à droite
    this.anims.create({
        key: "right",
        frames: this.anims.generateFrameNumbers("leodidas", { start: 25, end: 31 }),
        frameRate: 10,
        repeat: -1
    });
    // animations lorsque le personnage n'avance pas
    this.anims.create({
        key: "turng",
        frames: this.anims.generateFrameNumbers("leodidas", { start: 0, end: 4 }),
        frameRate: 10
    });
    this.anims.create({
        key: "turnd",
        frames: this.anims.generateFrameNumbers("leodidas", { start: 5, end: 9 }),
        frameRate: 10
    });
    // animations d'attaque du personnage
    this.anims.create({
        key: "epee_gauche",
        frames: this.anims.generateFrameNumbers("leodidas", { start: 37, end: 32 }),
        frameRate: 10
    });
    this.anims.create({
        key: "epee_droite",
        frames: this.anims.generateFrameNumbers("leodidas", { start: 40, end: 45 }),
        frameRate: 10
    });
    //animations des sauts
    this.anims.create({
        key: "sautd",
        frames: this.anims.generateFrameNumbers("leodidas", { start: 54, end: 55 }),
        frameRate: 10,
        repeat: 0
    });
    this.anims.create({
        key: "sautg",
        frames: this.anims.generateFrameNumbers("leodidas", { start: 51, end: 50 }),
        frameRate: 10,
        repeat: 0
    });
    //animations des dash du personnage
    this.anims.create({
        key: "dash_gauche",
        frames: this.anims.generateFrameNumbers("leodidas", { start: 10, end: 10 }),
        frameRate: 10,
        repeat: -1
    });
    this.anims.create({
        key: "dash_droite",
        frames: this.anims.generateFrameNumbers("leodidas", { start: 11, end: 11 }),
        frameRate: 10,
        repeat: -1
    });

    //Animations des ennemis
    //animation quand l'ennemi va à gauche
    this.anims.create({
        key: "Eleft",
        frames: this.anims.generateFrameNumbers("ennemi", { start: 17, end: 23 }),
        frameRate: 10,
        repeat: -1
    });
    //et quand il va a droite
    this.anims.create({
        key: "Eright",
        frames: this.anims.generateFrameNumbers("ennemi", { start: 25, end: 31 }),
        frameRate: 10,
        repeat: -1
    });
    //animations des attaques des ennemis
    this.anims.create({
        key: "Epoing_gauche",
        frames: this.anims.generateFrameNumbers("ennemi", {
        start: 38,
        end: 33
        }),
        frameRate: 10,
        repeat: -1
    });
    this.anims.create({
        key: "Epoing_droite",
        frames: this.anims.generateFrameNumbers("ennemi", { start: 39, end: 45 }),
        frameRate: 10,
        repeat: -1
    });
    //animation des sauts ennemis
    this.anims.create({
        key: "Esautd",
        frames: this.anims.generateFrameNumbers("ennemi", { start: 51, end: 53 }),
        frameRate: 10,
        repeat: 0
    });
    this.anims.create({
        key: "Esautg",
        frames: this.anims.generateFrameNumbers("ennemi", { start: 50, end: 48 }),
        frameRate: 10,
        repeat: 0
    });

    //Attribution des touches
    cursors = this.input.keyboard.createCursorKeys();
    boutonAttaque = this.input.keyboard.addKey("SPACE");
    saut = this.input.keyboard.addKey("Z");
    bas = this.input.keyboard.addKey("S");
    gauche = this.input.keyboard.addKey("Q");
    droite = this.input.keyboard.addKey("D");
    dash = this.input.keyboard.addKey("SHIFT");

    // redimentionnement du monde avec les dimensions calculées via tiled
    this.physics.world.setBounds(0, 0, 3200, 960);
    //  ajout du champs de la caméra de taille identique à celle du monde
    this.cameras.main.setBounds(0, 0, 3200, 960);
    // ancrage de la caméra sur le joueur
    this.cameras.main.startFollow(player);

    //Compteur de kill
    zone_texte_score = this.add.text(650, 24, "Kills: " + pts, {
        fontSize: "24px",
        fill: "#000"
    });
    zone_texte_score.setScrollFactor(0);

    //Collisions des ennemis
    groupe_ennemis = this.physics.add.group();
    this.physics.add.collider(groupe_ennemis, plateformes);
    this.physics.add.collider(groupe_ennemis, sol);

    //Définition du chrono
    monTimer = this.time.addEvent({
        delay: 1000,
        callback: compteUneSeconde,
        callbackScope: this,
        loop: true
    });
    chronoText = this.add.text(72, 26, "Chronomètre", {
        fontSize: "24px",
        fill: "#000" //Couleur de l'écriture
    });
    chronoText.setScrollFactor(0);

    //Mise en place des pictogrammes
    zone_chrono = this.add.image(42, 35, "chrono");
    zone_chrono.setScale(2);
    zone_chrono.setScrollFactor(0);
    zone_crane = this.add.image(619, 35, "crane");
    zone_crane.setScale(2.2);
    zone_crane.setScrollFactor(0);
    zone_coeur = this.add.image(43, 107, "coeur");
    zone_coeur.setScale(1.5);
    zone_coeur.setScrollFactor(0);

    //Augmentation de la vitesse globale du jeu
    setInterval(function () {
        vitesseJoueur *= 1.15; // Augmente la vitesse du joueur de 15%
        vitesseEnnemis *= 1.15; // Augmente la vitesse des ennemis de 15%
    }, 15000); //toute les 15 secondes

    //attaquer l'ennemi
    this.physics.add.overlap(groupe_ennemis, player, damage, null, this);
    this.input.keyboard.on("keydown-SPACE", ennemi_dead, this);

    // Barre de vie
    lifeBarBackground = this.add.graphics();
    drawLifeBarBackground();
    lifeBarForeground = this.add.graphics();
    drawLifeBarForeground();
    lifeBarBackground.setScrollFactor(0);
    lifeBarForeground.setScrollFactor(0);

    //timer de spawn de vague
    var spawn = this.time.addEvent({
        delay: 5000,
        callback: genererMob,
        callbackScope: this,
        loop: true
    });
    //timer delai collision attaques
    var present = this.time.addEvent({
        delay: 100,
        callback: nofutursight,
        callbackScope: this,
        loop: true
    });
    }

    function update() {
    //Descente rapide à travers les plateformes mais pas le sol
    if (bas.isDown && player.y < 800) {
        player.setVelocityY(320 * vitesseJoueur);
        player.body.checkCollision.down = false;
    } else if (bas.isDown && player.y > 800) {
        player.body.checkCollision.down = true;
    } else {
        player.body.checkCollision.down = true;
        player.body.checkCollision.right = true;
        player.body.checkCollision.left = true;
    }

    //Mouvement vers la gauche ou la droite
    if (gauche.isDown) {
        player.setVelocityX(-160 * vitesseJoueur);
        player.anims.play("left", true);
        player.direction = "left";
    } else if (droite.isDown) {
        player.setVelocityX(160 * vitesseJoueur);
        player.anims.play("right", true);
        player.direction = "right";
    } else {
        //Quand le perso est fixe
        player.setVelocityX(0);
        if (player.direction == "left" && player.body.blocked.down) {
        player.body.checkCollision.down = true;
        player.anims.play("turng", true);
        } else if (player.direction == "right" && player.body.blocked.down) {
        player.body.checkCollision.down = true;
        player.anims.play("turnd", true);
        }
    }

    //Saut du joueur
    if (saut.isDown && player.body.blocked.down) {
        player.setVelocityY(-320);
        player.body.checkCollision.up = false;
        if (player.direction == "right") {
        player.anims.play("sautd", true);
        } else if (player.direction == "left") {
        player.anims.play("sautg", true);
        }
    } else if (saut.isDown && player.body.blocked.left) {
        player.body.checkCollision.left = false;
        player.body.checkCollision.right = false;
    } else if (saut.isDown && player.body.blocked.right) {
        player.body.checkCollision.left = false;
        player.body.checkCollision.right = false;
    }

    //Permet d'attaquer
    if (boutonAttaque.isDown) {
        attaquer(player);
    }

    //Dash du joueur
    if (dash.isDown && droite.isDown && dashactif) {
        player.setVelocityX(320 * vitesseJoueur);
        player.anims.play("dash_droite", true);
        this.time.addEvent({
        delay: 1000, // régler le temps de dash
        callback: disableShift,
        callbackScope: this
        });
    } else if (dash.isDown && gauche.isDown && dashactif) {
        player.setVelocityX(-320 * vitesseJoueur);
        player.anims.play("dash_gauche", true);
        this.time.addEvent({
        delay: 1000, // régler le temps de dash
        callback: disableShift,
        callbackScope: this
        });
    }

    //Vitesse des ennemis
    groupe_ennemis.getChildren().forEach(function (un_ennemi) {
        if (player.x > un_ennemi.x) {
        vitesseEnnemis =
            Math.random() * (0.92 + 1 * 0.92 - (0.92 - 0.7 * 0.92)) +
            (0.92 - 0.7 * 0.92);
        un_ennemi.setVelocityX(160 * vitesseEnnemis);
        un_ennemi.anims.play("Eright", true);
        un_ennemi.direction = "right";
        } else if (player.x < un_ennemi.x) {
        vitesseEnnemis =
            Math.random() * (0.92 + 1 * 0.92 - (0.92 - 0.7 * 0.92)) +
            (0.92 - 0.7 * 0.92);
        un_ennemi.setVelocityX(-160 * vitesseEnnemis);
        un_ennemi.anims.play("Eleft", true);
        un_ennemi.direction = "left";
        }
    });

    //Saut des ennemis si joueur au dessus
    groupe_ennemis.getChildren().forEach(function (un_ennemi) {
        if (player.y < un_ennemi.y && un_ennemi.body.blocked.down) {
        un_ennemi.setVelocityY(-400);
        un_ennemi.anims.play("Esautg", true);
        un_ennemi.body.checkCollision.up = false;
        }
    });

    //Redirection après mort
    if (vie <= 0) {
        this.physics.pause();
        lifeBarForeground.setVisible(false);
        window.location.href = "index.html";
    }
    //Actualiser barre de vie
    updateLifeBar();
    }

    //Récupère les animations d'attaque
    function attaquer(player) {
    if (player.direction == "left") {
        player.anims.play("epee_gauche", true);
    } else {
        player.anims.play("epee_droite", true);
    }
    }

    //Gère les dégâts
    function damage(player, un_ennemi) {
    vie -= 1;
    collision = true;
    if (ennemi_actif) {
    } else {
        un_ennemi.setVisible(false);
        un_ennemi.setActive(false);
        un_ennemi.body.enable = false;
        ennemi_actif = true;
        pts += 1;
        vie += 20;
        zone_texte_score.setText("kills: " + pts);
    }
    }

    //Verifie que le joueur attaque l'ennemi
    function ennemi_dead(player, un_ennemi) {
    if (collision) {
        ennemi_actif = false;
    }
    }
    function nofutursight() {
    collision = false;
    }

    //Désactive temporairement le dash
    function disableShift() {
    dashactif = false;
    this.time.addEvent({
        delay: 1000, // temps de régénaration du dash
        callback: enableShift,
        callbackScope: this
    });
    }
    //Réactivation
    function enableShift() {
    dashactif = true;
    }

    //Génère un ennemi
    function genererMob() {
    {
        // mélange les coordonnées
        var shuffledCox = Phaser.Math.RND.shuffle(cox);
        var shuffledCoy = Phaser.Math.RND.shuffle(coy);
        var randomCoordinate1 = shuffledCox[1];
        var randomCoordinate2 = shuffledCoy[1];
        // puis le fait apparaitre
        var nouvel_ennemi = this.physics.add.sprite(
        randomCoordinate1,
        randomCoordinate2,
        "ennemi"
        );
    }
    nouvel_ennemi.setScale(1.8);
    groupe_ennemis.add(nouvel_ennemi);
    }
    //Couleur barre de vie et changements de couleur
    function drawLifeBarBackground() {
    lifeBarBackground.fillStyle(0x555555, 1);
    lifeBarBackground.fillRect(100, 100, 200, 20);
    }
    function drawLifeBarForeground() {
    lifeBarForeground.fillStyle(0xff0000, 1);
    lifeBarForeground.fillRect(100, 100, 200, 20);
    }
    function updateLifeBar() {
    if (vie > 1000) {
        vie = 1000;
    }
    var foregroundWidth = (vie / maxVie) * 200;
    lifeBarForeground.clear();
    var color = 0x00ff00;
    if (vie <= 500) {
        var color = 0xffff00;
    }
    if (vie <= 200) {
        var color = 0xff0000;
    }
    lifeBarForeground.fillStyle(color, 1);
    lifeBarForeground.fillRect(100, 100, foregroundWidth, 20);
    }

</script>

{% endblock %}

